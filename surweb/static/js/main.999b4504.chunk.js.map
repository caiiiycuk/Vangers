{"version":3,"sources":["xhr.ts","surweb.tsx","index.tsx"],"names":["resolveUrl","url","onProgress","a","Promise","resolve","reject","request","XMLHttpRequest","open","overrideMimeType","addEventListener","evt","Error","responseType","onreadystatechange","readyState","status","undefined","Uint8Array","response","onprogress","event","total","porgress","Math","round","loaded","send","SurWeb","useState","module","canvasRef","useRef","canvas","setCanvas","progress","setProgress","binaries","setBinaries","setLoaded","archiveUrl","setArchiveUrl","fileProgress","setFileProgress","reader","setReader","onArchive","archive","URL","revokeObjectURL","blob","Blob","type","createObjectURL","downloadUrl","useEffect","all","data","wasm","wasmJs","doLoad","catch","console","error","current","rect","parentElement","getBoundingClientRect","width","height","resizeCanvas","Module","saveZip","getPreloadedPackage","name","size","buffer","instantiateWasm","info","receiveInstance","WebAssembly","compile","wasmModule","instantiate","instance","onRuntimeInitialized","setTimeout","callMain","decoder","TextDecoder","Function","decode","moduleFn","e","then","className","Group","align","Alignment","LEFT","Heading","Divider","disabled","text","onInputChange","focus","files","currentTarget","length","file","FileReader","root","FS_cwd","FS_chdir","bytes","result","_malloc","HEAPU8","set","retcode","_zip_to_fs","_free","_reloadWorld","readAsArrayBuffer","intent","Intent","PRIMARY","value","onKeyDown","minimal","onClick","onResize","contentRect","id","ref","tabIndex","innerWidth","innerHeight","targetAspect","calculatedWidth","calculatedHeight","getSizeWithAspectRatio","style","position","top","left","marginTop","marginLeft","document","createElement","href","download","display","body","appendChild","click","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.999b4504.chunk.js","sourcesContent":["export async function resolveUrl(url: string,\n                                 onProgress?: (progress: number) => void): Promise<Uint8Array> {\n    return new Promise<Uint8Array>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        request.addEventListener(\"error\", (evt) => {\n            reject(new Error(\"Network error, can't download \" + url));\n        });\n        request.addEventListener(\"abort\", () => {\n            reject(new Error(\"Request canceled for url \" + url));\n        }, false);\n        request.responseType = \"arraybuffer\";\n        request.onreadystatechange = () => {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    if (onProgress !== undefined) {\n                        onProgress(100);\n                    }\n                    resolve(new Uint8Array(request.response));\n                } else {\n                    reject(new Error(\"Network error, can't download \" + url));\n                }\n            }\n        };\n        if (onProgress !== undefined) {\n            request.onprogress = (event) => {\n                if (event.total && event.total > 0) {\n                    const porgress = Math.round(event.loaded * 10000 / event.total) / 100;\n                    onProgress(porgress);\n                }\n            }\n        }\n        request.send();\n    });\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport './surweb.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nimport { Alignment, Button, Intent, Navbar, ResizeEntry, ResizeSensor, Spinner, FileInput } from \"@blueprintjs/core\";\nimport { resolveUrl } from './xhr';\n\nconst WIDTH = 1280;\nconst HEIGHT = 720;\n\ntype Binaries = { data: Uint8Array, wasm: Uint8Array, wasmJs: Uint8Array };\n\nexport function SurWeb() {\n  const [module, _] = useState<any>({});\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvas, setCanvas] = useState<HTMLCanvasElement | null>(null);\n  const [progress, setProgress] = useState<number>(0);\n  const [binaries, setBinaries] = useState<Binaries | null>(null);\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [archiveUrl, setArchiveUrl] = useState<string | null>(null);\n  const [fileProgress, setFileProgress] = useState<number>(0);\n  const [reader, setReader] = useState<FileReader|null>(null);\n\n  useEffect(() => {\n    async function doLoad() {\n      const [data, wasm, wasmJs] = await Promise.all([\n        resolveUrl(\"surmap/surmap.data\", setProgress),\n        resolveUrl(\"surmap/surmap.wasm\"),\n        resolveUrl(\"surmap/surmap.js\")]);\n\n      setBinaries({ data, wasm, wasmJs });\n    };\n\n    doLoad().catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef.current !== null) {\n      const canvas = canvasRef.current;\n      const rect = (canvas.parentElement as HTMLElement).getBoundingClientRect();\n      setCanvas(canvas);\n\n      canvas.width = WIDTH;\n      canvas.height = HEIGHT;\n      resizeCanvas(canvas, rect.width, rect.height);\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    if (canvas === null || binaries === null) {\n      return;\n    }\n\n    instantiateWasm(canvas, binaries, module, onArchive)\n      .then(() => setLoaded(true))\n      .catch(console.error);\n  }, [canvas, binaries, module, onArchive]);\n\n  function onResize(e: ResizeEntry[]) {\n    if (canvas !== null) {\n      resizeCanvas(canvas, e[0].contentRect.width, e[0].contentRect.height);\n    }\n  }\n\n  function onArchive(archive: Uint8Array) {\n    if (archiveUrl !== null) {\n      URL.revokeObjectURL(archiveUrl);\n    }\n\n    const blob = new Blob([archive], {\n      type: \"application/zip\"\n    });\n    const url = URL.createObjectURL(blob);\n    setArchiveUrl(url);\n    downloadUrl(url);\n  }\n\n  function onDownload() {\n    canvas?.focus();\n\n    if (archiveUrl !== null) {\n      downloadUrl(archiveUrl);\n    }\n  }\n\n  function onUpload(e: any) {\n    canvas?.focus();\n\n    const files = e.currentTarget.files as FileList;\n    if (files.length === 0) {\n      setReader(null);\n      return;\n    }\n\n    const file = files[0];\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", async (e) => {\n      const root = module.FS_cwd();\n\n      module.FS_chdir(root + \"thechain/mirage/\");\n      const bytes = new Uint8Array(reader.result as ArrayBuffer);\n      const buffer = module._malloc(bytes.length);\n      module.HEAPU8.set(bytes, buffer);\n      const retcode = module._zip_to_fs(buffer, bytes.length);\n      module._free(buffer);\n\n      module.FS_chdir(root);\n\n\n      if (retcode === 0) {\n        module._reloadWorld();\n      } else {\n        console.error(\"Unable to extract, retcode\", retcode);\n      }\n\n      setReader(null);\n    });\n    reader.addEventListener(\"progress\", (e) => setFileProgress(e.loaded / e.total));\n    reader.readAsArrayBuffer(file);\n    setReader(reader);\n  }\n\n  return (\n    <div className=\"surweb-container\">\n      <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>SurWeb</Navbar.Heading>\n          <Navbar.Divider />\n          {\n            loaded ?\n              <div className=\"file-container\">\n                <FileInput disabled={reader !== null} text=\"Select ZIP\" onInputChange={onUpload} />\n                &nbsp;&nbsp;\n                <Spinner size={16} intent={Intent.PRIMARY} value={fileProgress} />\n              </div> :\n              <Navbar.Heading>Loading {progress}%</Navbar.Heading>\n          }\n          {\n            archiveUrl !== null ?\n              <Button onKeyDown={() => { }} minimal={true} onClick={onDownload}>Download ZIP</Button> :\n              null\n          }\n        </Navbar.Group>\n      </Navbar>\n      <ResizeSensor onResize={onResize}>\n        <div className=\"canvas-container\">\n          <canvas id=\"canvas\" ref={canvasRef} tabIndex={0}></canvas>\n          {loaded ? null : <div className=\"spinner-container\"><Spinner size={64} /></div>}\n        </div>\n      </ResizeSensor>\n    </div>\n  );\n}\n\nfunction instantiateWasm(canvas: HTMLCanvasElement,\n  binaries: Binaries,\n  Module: any,\n  onArchive: (archive: Uint8Array) => void) {\n  return new Promise<void>((resolve, reject) => {\n    try {\n      Module.saveZip = onArchive;\n      Module.canvas = canvas;\n      Module.getPreloadedPackage = (name: any, size: any) => binaries.data.buffer;\n      Module.instantiateWasm = async (info: any, receiveInstance: any) => {\n        const wasmModule = await WebAssembly.compile(binaries.wasm);\n        const instance = await WebAssembly.instantiate(wasmModule, info);\n        receiveInstance(instance, wasmModule);\n      };\n\n      Module.onRuntimeInitialized = () => {\n        setTimeout(() => {\n          Module.callMain([]);\n          resolve();\n        }, 16);\n      };\n\n      const decoder = new TextDecoder();\n      const moduleFn = new (Function as any)([\"Module\"], decoder.decode(binaries.wasmJs));\n      moduleFn(Module);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction resizeCanvas(canvas: HTMLCanvasElement, innerWidth: number, innerHeight: number) {\n  const [width, height] = getSizeWithAspectRatio(innerWidth, innerHeight, WIDTH / HEIGHT);\n\n  canvas.style.position = \"relative\";\n  canvas.style.top = (innerHeight / 2) + \"px\";\n  canvas.style.left = (innerWidth / 2) + \"px\";\n  canvas.style.marginTop = (-1) * (height / 2) + \"px\";\n  canvas.style.marginLeft = (-1) * (width / 2) + \"px\";\n  canvas.style.width = width + \"px\";\n  canvas.style.height = height + \"px\";\n}\n\nfunction getSizeWithAspectRatio(width: number, height: number, targetAspect: number) {\n  const screenAspect = width / height;\n  if (screenAspect === targetAspect) {\n    return [width, height];\n  }\n  const calculatedWidth = Math.round(height * targetAspect);\n  if (calculatedWidth <= width) {\n    return [calculatedWidth, height];\n  }\n  const calculatedHeight = Math.round(width / targetAspect);\n  return [width, calculatedHeight];\n}\n\nfunction downloadUrl(url: string) {\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = \"mirage.zip\";\n  a.style.display = \"none\";\n  document.body.appendChild(a);\n\n  a.click();\n  a.remove();\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { SurWeb } from './surweb';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SurWeb />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}